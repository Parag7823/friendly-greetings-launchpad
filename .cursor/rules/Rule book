User Rules (user_rules.json)

This applies globally to all projects.

{
  "rules": [
    {
      "description": "No stacking failed fixes",
      "instruction": "If a proposed fix does not solve the issue, fully revert it. Do not leave broken or redundant code in place."
    },
    {
      "description": "Explain reasoning clearly",
      "instruction": "Always explain the intent of code changes, why they are needed, and potential trade-offs. Never just dump code without rationale."
    },
    {
      "description": "Write production-quality code",
      "instruction": "Follow best practices: meaningful variable names, consistent formatting, DRY principle, no commented-out code, no unnecessary logs or debug statements."
    },
    {
      "description": "Handle edge cases",
      "instruction": "Always consider null, undefined, empty, large input, error states, and edge cases explicitly in implementation."
    },
    {
      "description": "Error handling required",
      "instruction": "Every function that can fail must handle errors gracefully, with proper logging or safe defaults. Never assume happy-path only."
    },
    {
      "description": "Tests required",
      "instruction": "Include or update unit tests and integration tests for every non-trivial change. Never introduce untested code paths."
    },
    {
      "description": "Security awareness",
      "instruction": "Check for common security issues: SQL injection, XSS, unsafe file handling, hardcoded secrets. Do not generate insecure code."
    },
    {
      "description": "Performance awareness",
      "instruction": "Avoid O(n^2) or worse algorithms on large inputs unless necessary. Flag expensive operations and suggest alternatives."
    },
    {
      "description": "Minimal dependencies",
      "instruction": "Do not add new libraries unless absolutely necessary. Prefer standard library or existing project dependencies."
    },
    {
      "description": "Documentation required",
      "instruction": "Every new function, class, or module must include clear docstrings or comments explaining usage and intent."
    }
  ]
}

2️⃣ Project Rules (project_rules.json)

This applies only to a specific project and focuses on scalability & production readiness.

{
  "rules": [
    {
      "description": "Scalability awareness",
      "instruction": "Design solutions to handle millions of users. Avoid single points of failure and use stateless services where possible. Plan for horizontal scaling."
    },
    {
      "description": "Database efficiency",
      "instruction": "Do not use SELECT *. Consider indexes, pagination, cursors, and streaming for large datasets. Avoid loading all data into memory."
    },
    {
      "description": "Caching best practices",
      "instruction": "Consider caching repeated or expensive operations (in-memory, Redis, CDN). Avoid recalculating or re-fetching large data unnecessarily."
    },
    {
      "description": "Async and concurrency",
      "instruction": "Use async, batching, or queue-based approaches for tasks that could block or overwhelm the system. Never rely on synchronous loops for network/database-heavy operations at scale."
    },
    {
      "description": "Fault tolerance",
      "instruction": "Design for retries, exponential backoff, and circuit breakers. Systems should degrade gracefully under heavy load or external service failures."
    },
    {
      "description": "Logging and observability",
      "instruction": "Include structured logging, metrics, and error tracing. Ensure code is production-observable for debugging at scale."
    },
    {
      "description": "Configuration over hardcoding",
      "instruction": "Never hardcode values like URLs, API keys, timeouts, or resource limits. Use environment variables or config management suitable for dev/staging/prod."
    },
    {
      "description": "Data integrity at scale",
      "instruction": "Ensure idempotency of operations, consistent data writes, and safe migrations. Avoid race conditions and partial updates."
    },
    {
      "description": "Cost awareness",
      "instruction": "Consider cloud cost efficiency. Avoid generating code that leads to uncontrolled compute, storage, or network expenses at scale."
    },
    {
      "description": "Security at scale",
      "instruction": "Assume the system will be attacked at scale. Sanitize all inputs, enforce rate limiting, validate authentication/authorization rigorously."
    }
  ]
}