{
  "info": {
    "name": "Cross-File Relationship Detection Tests",
    "description": "Enhanced tests for cross-file relationship detection between uploaded files",
    "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
  },
  "item": [
    {
      "name": "1. Debug Cross-File Data",
      "request": {
        "method": "GET",
        "header": [],
        "url": {
          "raw": "{{base_url}}/debug-cross-file-data/{{user_id}}",
          "host": ["{{base_url}}"],
          "path": ["debug-cross-file-data", "{{user_id}}"]
        }
      },
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test('Status code is 200', function () {",
              "    pm.response.to.have.status(200);",
              "});",
              "",
              "pm.test('Response has required fields', function () {",
              "    const jsonData = pm.response.json();",
              "    pm.expect(jsonData).to.have.property('total_files');",
              "    pm.expect(jsonData).to.have.property('total_events');",
              "    pm.expect(jsonData).to.have.property('files');",
              "    pm.expect(jsonData).to.have.property('potential_cross_file_relationships');",
              "});",
              "",
              "pm.test('Has files available', function () {",
              "    const jsonData = pm.response.json();",
              "    pm.expect(jsonData.total_files).to.be.above(0);",
              "});",
              "",
              "// Log results for debugging",
              "const jsonData = pm.response.json();",
              "console.log('Total Files:', jsonData.total_files);",
              "console.log('Total Events:', jsonData.total_events);",
              "console.log('Analysis Ready:', jsonData.analysis_ready);",
              "",
              "if (jsonData.files) {",
              "    console.log('Available Files:');",
              "    jsonData.files.forEach(file => {",
              "        console.log(`  - ${file.filename}: ${file.event_count} events`);",
              "    });",
              "}",
              "",
              "if (jsonData.potential_cross_file_relationships) {",
              "    console.log('Potential Cross-File Relationships:');",
              "    jsonData.potential_cross_file_relationships.forEach(rel => {",
              "        const status = rel.can_analyze ? '✅' : '❌';",
              "        console.log(`  ${status} ${rel.source_file} (${rel.source_events}) ↔ ${rel.target_file} (${rel.target_events})`);",
              "    });",
              "}"
            ]
          }
        }
      ]
    },
    {
      "name": "2. Enhanced Relationship Detection",
      "request": {
        "method": "GET",
        "header": [],
        "url": {
          "raw": "{{base_url}}/test-enhanced-relationship-detection/{{user_id}}",
          "host": ["{{base_url}}"],
          "path": ["test-enhanced-relationship-detection", "{{user_id}}"]
        }
      },
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test('Status code is 200', function () {",
              "    pm.response.to.have.status(200);",
              "});",
              "",
              "pm.test('Response has success field', function () {",
              "    const jsonData = pm.response.json();",
              "    pm.expect(jsonData).to.have.property('success');",
              "});",
              "",
              "pm.test('Has result with relationships', function () {",
              "    const jsonData = pm.response.json();",
              "    pm.expect(jsonData).to.have.property('result');",
              "    pm.expect(jsonData.result).to.have.property('relationships');",
              "});",
              "",
              "// Log detailed results",
              "const jsonData = pm.response.json();",
              "const result = jsonData.result || {};",
              "const relationships = result.relationships || [];",
              "",
              "console.log('Enhanced Relationship Detection Results:');",
              "console.log('Total Relationships:', result.total_relationships || 0);",
              "console.log('Cross-File Relationships:', result.cross_file_relationships || 0);",
              "console.log('Within-File Relationships:', result.within_file_relationships || 0);",
              "",
              "if (relationships.length > 0) {",
              "    console.log('Sample Relationships:');",
              "    relationships.slice(0, 3).forEach((rel, index) => {",
              "        console.log(`  ${index + 1}. ${rel.source_file || 'unknown'} → ${rel.target_file || 'unknown'}`);",
              "        console.log(`     Type: ${rel.relationship_type || 'unknown'}`);",
              "        console.log(`     Confidence: ${(rel.confidence_score || 0).toFixed(3)}`);",
              "        console.log(`     Method: ${rel.detection_method || 'unknown'}`);",
              "    });",
              "} else {",
              "    console.log('❌ No relationships found');",
              "}",
              "",
              "// Check for cross-file relationships specifically",
              "const crossFileRels = relationships.filter(rel => ",
              "    rel.detection_method === 'cross_file_analysis' || ",
              "    (rel.source_file !== rel.target_file)",
              ");",
              "",
              "if (crossFileRels.length > 0) {",
              "    console.log(`✅ Found ${crossFileRels.length} cross-file relationships!`);",
              "} else {",
              "    console.log('⚠️ No cross-file relationships found');",
              "}"
            ]
          }
        }
      ]
    },
    {
      "name": "3. Cross-File Relationships (Original)",
      "request": {
        "method": "GET",
        "header": [],
        "url": {
          "raw": "{{base_url}}/test-cross-file-relationships/{{user_id}}",
          "host": ["{{base_url}}"],
          "path": ["test-cross-file-relationships", "{{user_id}}"]
        }
      },
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test('Status code is 200', function () {",
              "    pm.response.to.have.status(200);",
              "});",
              "",
              "const jsonData = pm.response.json();",
              "console.log('Cross-File Relationships (Original):');",
              "console.log('Success:', jsonData.success);",
              "console.log('Message:', jsonData.message);",
              "",
              "if (jsonData.relationships) {",
              "    console.log('Relationships found:', jsonData.relationships.length);",
              "} else {",
              "    console.log('No relationships in response');",
              "}"
            ]
          }
        }
      ]
    },
    {
      "name": "4. AI Relationship Detection",
      "request": {
        "method": "GET",
        "header": [],
        "url": {
          "raw": "{{base_url}}/test-ai-relationship-detection/{{user_id}}",
          "host": ["{{base_url}}"],
          "path": ["test-ai-relationship-detection", "{{user_id}}"]
        }
      },
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test('Status code is 200', function () {",
              "    pm.response.to.have.status(200);",
              "});",
              "",
              "const jsonData = pm.response.json();",
              "console.log('AI Relationship Detection:');",
              "console.log('Message:', jsonData.message);",
              "",
              "if (jsonData.result && jsonData.result.relationships) {",
              "    const relationships = jsonData.result.relationships;",
              "    console.log('Total relationships:', relationships.length);",
              "    ",
              "    // Check for cross-file relationships",
              "    const crossFile = relationships.filter(rel => rel.source_file !== rel.target_file);",
              "    console.log('Cross-file relationships:', crossFile.length);",
              "}"
            ]
          }
        }
      ]
    }
  ],
  "variable": [
    {
      "key": "base_url",
      "value": "http://localhost:8000",
      "type": "string"
    },
    {
      "key": "user_id",
      "value": "550e8400-e29b-41d4-a716-446655440000",
      "type": "string"
    }
  ]
}
