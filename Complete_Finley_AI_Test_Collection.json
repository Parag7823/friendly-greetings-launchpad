{
  "info": {
    "name": "Complete Finley AI Test Collection - All 36 Endpoints",
    "description": "Comprehensive test suite for ALL Finley AI features using existing 10 CSV files",
    "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
  },
  "variable": [
    {
      "key": "base_url",
      "value": "http://localhost:8000",
      "type": "string"
    },
    {
      "key": "user_id",
      "value": "550e8400-e29b-41d4-a716-446655440000",
      "type": "string"
    }
  ],
  "item": [
    {
      "name": "🏥 SYSTEM HEALTH TESTS",
      "item": [
        {
          "name": "1. Health Check",
          "request": {
            "method": "GET",
            "header": [],
            "url": "{{base_url}}/health"
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Health check passes', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Response has status field', function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('status');",
                  "});",
                  "",
                  "console.log('✅ Health Check:', pm.response.json().status);"
                ]
              }
            }
          ]
        },
        {
          "name": "2. Simple Test (Dependencies)",
          "request": {
            "method": "GET",
            "header": [],
            "url": "{{base_url}}/test-simple"
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Dependencies loaded', function () {",
                  "    pm.response.to.have.status(200);",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData.status).to.eql('success');",
                  "});",
                  "",
                  "const jsonData = pm.response.json();",
                  "console.log('✅ Dependencies:', Object.keys(jsonData.dependencies || {}));"
                ]
              }
            }
          ]
        },
        {
          "name": "3. Database Test",
          "request": {
            "method": "GET",
            "header": [],
            "url": "{{base_url}}/test-database"
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Database connection works', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "const jsonData = pm.response.json();",
                  "console.log('✅ Database:', jsonData.message);"
                ]
              }
            }
          ]
        },
        {
          "name": "4. Environment Debug",
          "request": {
            "method": "GET",
            "header": [],
            "url": "{{base_url}}/debug-env"
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Environment configured', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "const jsonData = pm.response.json();",
                  "console.log('✅ Environment Status:', jsonData.status);"
                ]
              }
            }
          ]
        }
      ]
    },
    {
      "name": "📊 DATA VERIFICATION",
      "item": [
        {
          "name": "5. Debug User Data",
          "request": {
            "method": "GET",
            "header": [],
            "url": "{{base_url}}/debug-user-data"
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('User data endpoint works', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "const jsonData = pm.response.json();",
                  "console.log('📊 Total Events:', jsonData.total_events);",
                  "console.log('📁 Total Files:', jsonData.total_unique_users);",
                  "console.log('🧪 Test User Exists:', jsonData.test_user_exists);",
                  "",
                  "if (jsonData.all_users && jsonData.all_users.length > 0) {",
                  "    console.log('👥 Available Users:');",
                  "    jsonData.all_users.forEach((user, index) => {",
                  "        console.log(`  ${index + 1}. ${user.user_id}: ${user.event_count} events, ${user.file_count} files`);",
                  "    });",
                  "    ",
                  "    // Update user_id variable if test user doesn't exist",
                  "    if (!jsonData.test_user_exists && jsonData.all_users.length > 0) {",
                  "        const activeUser = jsonData.all_users[0].user_id;",
                  "        pm.collectionVariables.set('user_id', activeUser);",
                  "        console.log(`🔄 Updated user_id to: ${activeUser}`);",
                  "    }",
                  "} else {",
                  "    console.log('⚠️ No users found - upload files first');",
                  "}"
                ]
              }
            }
          ]
        },
        {
          "name": "6. Test Raw Events",
          "request": {
            "method": "GET",
            "header": [],
            "url": "{{base_url}}/test-raw-events/{{user_id}}"
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Raw events accessible', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "const jsonData = pm.response.json();",
                  "console.log('📊 Raw Events Count:', jsonData.total_events || 0);",
                  "console.log('📁 Files Processed:', jsonData.files_processed || 0);"
                ]
              }
            }
          ]
        }
      ]
    },
    {
      "name": "🤖 AI-POWERED FEATURES",
      "item": [
        {
          "name": "7. Platform Detection",
          "request": {
            "method": "GET",
            "header": [],
            "url": "{{base_url}}/test-platform-detection"
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Platform detection works', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "const jsonData = pm.response.json();",
                  "if (jsonData.detected_platforms) {",
                  "    console.log('🔍 Detected Platforms:', jsonData.detected_platforms.length);",
                  "    jsonData.detected_platforms.forEach(platform => {",
                  "        console.log(`  - ${platform.platform}: ${platform.confidence}`);",
                  "    });",
                  "}"
                ]
              }
            }
          ]
        },
        {
          "name": "8. AI Row Classification",
          "request": {
            "method": "GET",
            "header": [],
            "url": "{{base_url}}/test-ai-row-classification"
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('AI classification works', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "const jsonData = pm.response.json();",
                  "console.log('🤖 AI Classification Results:', jsonData.message);"
                ]
              }
            }
          ]
        },
        {
          "name": "9. Dynamic Platform Detection",
          "request": {
            "method": "GET",
            "header": [],
            "url": "{{base_url}}/test-dynamic-platform-detection"
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Dynamic platform detection works', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "const jsonData = pm.response.json();",
                  "console.log('🔄 Dynamic Detection:', jsonData.message);"
                ]
              }
            }
          ]
        },
        {
          "name": "10. Platform Learning",
          "request": {
            "method": "GET",
            "header": [],
            "url": "{{base_url}}/test-platform-learning/{{user_id}}"
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Platform learning works', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "const jsonData = pm.response.json();",
                  "console.log('📚 Platform Learning:', jsonData.message);"
                ]
              }
            }
          ]
        },
        {
          "name": "11. Platform Discovery",
          "request": {
            "method": "GET",
            "header": [],
            "url": "{{base_url}}/test-platform-discovery/{{user_id}}"
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Platform discovery works', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "const jsonData = pm.response.json();",
                  "console.log('🔍 Platform Discovery:', jsonData.message);"
                ]
              }
            }
          ]
        },
        {
          "name": "12. Batch Processing",
          "request": {
            "method": "GET",
            "header": [],
            "url": "{{base_url}}/test-batch-processing"
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Batch processing works', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "const jsonData = pm.response.json();",
                  "console.log('⚡ Batch Processing:', jsonData.message);"
                ]
              }
            }
          ]
        }
      ]
    },
    {
      "name": "💰 DATA ENRICHMENT",
      "item": [
        {
          "name": "13. Currency Normalization",
          "request": {
            "method": "GET",
            "header": [],
            "url": "{{base_url}}/test-currency-normalization"
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Currency normalization works', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "const jsonData = pm.response.json();",
                  "if (jsonData.test_results) {",
                  "    console.log('💱 Currency Tests:', jsonData.test_results.length);",
                  "    jsonData.test_results.forEach(result => {",
                  "        console.log(`  ${result.original_amount} → ${result.normalized_amount}`);",
                  "    });",
                  "}"
                ]
              }
            }
          ]
        },
        {
          "name": "14. Vendor Standardization",
          "request": {
            "method": "GET",
            "header": [],
            "url": "{{base_url}}/test-vendor-standardization"
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Vendor standardization works', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "const jsonData = pm.response.json();",
                  "console.log('🏢 Vendor Standardization:', jsonData.message);"
                ]
              }
            }
          ]
        },
        {
          "name": "15. Platform ID Extraction",
          "request": {
            "method": "GET",
            "header": [],
            "url": "{{base_url}}/test-platform-id-extraction"
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Platform ID extraction works', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "const jsonData = pm.response.json();",
                  "console.log('🆔 Platform ID Extraction:', jsonData.message);"
                ]
              }
            }
          ]
        },
        {
          "name": "16. Complete Data Enrichment",
          "request": {
            "method": "GET",
            "header": [],
            "url": "{{base_url}}/test-data-enrichment"
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Data enrichment pipeline works', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "const jsonData = pm.response.json();",
                  "console.log('🔧 Data Enrichment:', jsonData.message);"
                ]
              }
            }
          ]
        },
        {
          "name": "17. Enrichment Stats",
          "request": {
            "method": "GET",
            "header": [],
            "url": "{{base_url}}/test-enrichment-stats/{{user_id}}"
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Enrichment stats accessible', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "const jsonData = pm.response.json();",
                  "console.log('📊 Enrichment Stats:', jsonData.message);"
                ]
              }
            }
          ]
        },
        {
          "name": "18. Vendor Search",
          "request": {
            "method": "GET",
            "header": [],
            "url": "{{base_url}}/test-vendor-search/{{user_id}}?vendor_name=Google"
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Vendor search works', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "const jsonData = pm.response.json();",
                  "console.log('🔍 Vendor Search:', jsonData.message);"
                ]
              }
            }
          ]
        },
        {
          "name": "19. Currency Summary",
          "request": {
            "method": "GET",
            "header": [],
            "url": "{{base_url}}/test-currency-summary/{{user_id}}"
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Currency summary works', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "const jsonData = pm.response.json();",
                  "console.log('💰 Currency Summary:', jsonData.message);"
                ]
              }
            }
          ]
        }
      ]
    },
    {
      "name": "👥 ENTITY RESOLUTION",
      "item": [
        {
          "name": "20. Entity Resolution Test",
          "request": {
            "method": "GET",
            "header": [],
            "url": "{{base_url}}/test-entity-resolution"
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Entity resolution works', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "const jsonData = pm.response.json();",
                  "console.log('👥 Entity Resolution:', jsonData.message);"
                ]
              }
            }
          ]
        },
        {
          "name": "21. Entity Search",
          "request": {
            "method": "GET",
            "header": [],
            "url": "{{base_url}}/test-entity-search/{{user_id}}?search_term=Google"
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Entity search works', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "const jsonData = pm.response.json();",
                  "console.log('🔍 Entity Search:', jsonData.message);"
                ]
              }
            }
          ]
        },
        {
          "name": "22. Entity Stats",
          "request": {
            "method": "GET",
            "header": [],
            "url": "{{base_url}}/test-entity-stats/{{user_id}}"
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Entity stats accessible', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "const jsonData = pm.response.json();",
                  "console.log('📊 Entity Stats:', jsonData.message);"
                ]
              }
            }
          ]
        }
      ]
    },
    {
      "name": "🔗 RELATIONSHIP DETECTION",
      "item": [
        {
          "name": "23. Debug Cross-File Data",
          "request": {
            "method": "GET",
            "header": [],
            "url": "{{base_url}}/debug-cross-file-data/{{user_id}}"
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Cross-file debug works', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "const jsonData = pm.response.json();",
                  "console.log('📁 Total Files:', jsonData.total_files || 0);",
                  "console.log('📊 Total Events:', jsonData.total_events || 0);",
                  "console.log('🔗 Analysis Ready:', jsonData.analysis_ready || 0);",
                  "",
                  "if (jsonData.files) {",
                  "    console.log('📋 Available Files:');",
                  "    jsonData.files.forEach(file => {",
                  "        console.log(`  - ${file.filename}: ${file.event_count} events`);",
                  "    });",
                  "}",
                  "",
                  "if (jsonData.potential_cross_file_relationships) {",
                  "    console.log('🔗 Potential Relationships:');",
                  "    jsonData.potential_cross_file_relationships.forEach(rel => {",
                  "        const status = rel.can_analyze ? '✅' : '❌';",
                  "        console.log(`  ${status} ${rel.source_file} ↔ ${rel.target_file}`);",
                  "    });",
                  "}"
                ]
              }
            }
          ]
        },
        {
          "name": "24. Enhanced Relationship Detection",
          "request": {
            "method": "GET",
            "header": [],
            "url": "{{base_url}}/test-enhanced-relationship-detection/{{user_id}}"
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Enhanced relationship detection works', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "const jsonData = pm.response.json();",
                  "const result = jsonData.result || {};",
                  "const relationships = result.relationships || [];",
                  "",
                  "console.log('🔗 Enhanced Relationship Detection Results:');",
                  "console.log('  Total Relationships:', result.total_relationships || relationships.length);",
                  "console.log('  Cross-File:', result.cross_file_relationships || 0);",
                  "console.log('  Within-File:', result.within_file_relationships || 0);",
                  "",
                  "if (relationships.length > 0) {",
                  "    console.log('  Sample Relationships:');",
                  "    relationships.slice(0, 3).forEach((rel, index) => {",
                  "        console.log(`    ${index + 1}. ${rel.source_file || 'unknown'} → ${rel.target_file || 'unknown'}`);",
                  "        console.log(`       Type: ${rel.relationship_type || 'unknown'}`);",
                  "        console.log(`       Confidence: ${(rel.confidence_score || 0).toFixed(3)}`);",
                  "    });",
                  "} else {",
                  "    console.log('  ❌ No relationships found');",
                  "}",
                  "",
                  "// Test success criteria",
                  "pm.test('Has relationships or valid reason for none', function () {",
                  "    const hasRelationships = relationships.length > 0;",
                  "    const hasValidMessage = result.message && result.message.includes('No data found');",
                  "    pm.expect(hasRelationships || hasValidMessage).to.be.true;",
                  "});"
                ]
              }
            }
          ]
        },
        {
          "name": "25. Cross-File Relationships",
          "request": {
            "method": "GET",
            "header": [],
            "url": "{{base_url}}/test-cross-file-relationships/{{user_id}}"
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Cross-file relationships work', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "const jsonData = pm.response.json();",
                  "console.log('🔗 Cross-File Relationships:', jsonData.message);",
                  "console.log('  Success:', jsonData.success);",
                  "",
                  "if (jsonData.relationships) {",
                  "    console.log('  Found:', jsonData.relationships.length, 'relationships');",
                  "}"
                ]
              }
            }
          ]
        },
        {
          "name": "26. AI Relationship Detection",
          "request": {
            "method": "GET",
            "header": [],
            "url": "{{base_url}}/test-ai-relationship-detection/{{user_id}}"
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('AI relationship detection works', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "const jsonData = pm.response.json();",
                  "console.log('🤖 AI Relationship Detection:', jsonData.message);"
                ]
              }
            }
          ]
        },
        {
          "name": "27. Relationship Discovery",
          "request": {
            "method": "GET",
            "header": [],
            "url": "{{base_url}}/test-relationship-discovery/{{user_id}}"
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Relationship discovery works', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "const jsonData = pm.response.json();",
                  "console.log('🔍 Relationship Discovery:', jsonData.message);"
                ]
              }
            }
          ]
        },
        {
          "name": "28. AI Relationship Scoring",
          "request": {
            "method": "GET",
            "header": [],
            "url": "{{base_url}}/test-ai-relationship-scoring/{{user_id}}"
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('AI relationship scoring works', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "const jsonData = pm.response.json();",
                  "console.log('📊 AI Relationship Scoring:', jsonData.message);"
                ]
              }
            }
          ]
        },
        {
          "name": "29. Relationship Validation",
          "request": {
            "method": "GET",
            "header": [],
            "url": "{{base_url}}/test-relationship-validation/{{user_id}}"
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Relationship validation works', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "const jsonData = pm.response.json();",
                  "console.log('✅ Relationship Validation:', jsonData.message);"
                ]
              }
            }
          ]
        }
      ]
    },
    {
      "name": "📈 PLATFORM INSIGHTS",
      "item": [
        {
          "name": "30. Platform Insights - Stripe",
          "request": {
            "method": "GET",
            "header": [],
            "url": "{{base_url}}/test-platform-insights/stripe?user_id={{user_id}}"
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Platform insights work', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "const jsonData = pm.response.json();",
                  "console.log('📈 Stripe Insights:', jsonData.message);"
                ]
              }
            }
          ]
        }
      ]
    },
    {
      "name": "🔗 RELATIONSHIP DETECTION",
      "item": [
        {
          "name": "23. Debug Cross-File Data",
          "request": {
            "method": "GET",
            "header": [],
            "url": "{{base_url}}/debug-cross-file-data/{{user_id}}"
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Cross-file debug works', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "const jsonData = pm.response.json();",
                  "console.log('📁 Files:', jsonData.total_files || 0);",
                  "console.log('📊 Events:', jsonData.total_events || 0);"
                ]
              }
            }
          ]
        },
        {
          "name": "24. Enhanced Relationship Detection",
          "request": {
            "method": "GET",
            "header": [],
            "url": "{{base_url}}/test-enhanced-relationship-detection/{{user_id}}"
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Enhanced relationships work', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "const jsonData = pm.response.json();",
                  "const result = jsonData.result || {};",
                  "console.log('🔗 Relationships:', (result.relationships || []).length);"
                ]
              }
            }
          ]
        },
        {
          "name": "25. Cross-File Relationships",
          "request": {
            "method": "GET",
            "header": [],
            "url": "{{base_url}}/test-cross-file-relationships/{{user_id}}"
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Cross-file works', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "const jsonData = pm.response.json();",
                  "console.log('🔗 Cross-File:', jsonData.message);"
                ]
              }
            }
          ]
        }
      ]
    }
  ]
}
